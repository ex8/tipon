// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TipServiceClient is the client API for TipService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TipServiceClient interface {
	FindTips(ctx context.Context, in *FindTipsRequest, opts ...grpc.CallOption) (TipService_FindTipsClient, error)
	FindOneTip(ctx context.Context, in *FindOneTipRequest, opts ...grpc.CallOption) (*Tip, error)
	CreateTip(ctx context.Context, in *Tip, opts ...grpc.CallOption) (*Tip, error)
	UpdateTip(ctx context.Context, in *Tip, opts ...grpc.CallOption) (*Tip, error)
}

type tipServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTipServiceClient(cc grpc.ClientConnInterface) TipServiceClient {
	return &tipServiceClient{cc}
}

func (c *tipServiceClient) FindTips(ctx context.Context, in *FindTipsRequest, opts ...grpc.CallOption) (TipService_FindTipsClient, error) {
	stream, err := c.cc.NewStream(ctx, &TipService_ServiceDesc.Streams[0], "/pb.TipService/FindTips", opts...)
	if err != nil {
		return nil, err
	}
	x := &tipServiceFindTipsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TipService_FindTipsClient interface {
	Recv() (*Tip, error)
	grpc.ClientStream
}

type tipServiceFindTipsClient struct {
	grpc.ClientStream
}

func (x *tipServiceFindTipsClient) Recv() (*Tip, error) {
	m := new(Tip)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *tipServiceClient) FindOneTip(ctx context.Context, in *FindOneTipRequest, opts ...grpc.CallOption) (*Tip, error) {
	out := new(Tip)
	err := c.cc.Invoke(ctx, "/pb.TipService/FindOneTip", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tipServiceClient) CreateTip(ctx context.Context, in *Tip, opts ...grpc.CallOption) (*Tip, error) {
	out := new(Tip)
	err := c.cc.Invoke(ctx, "/pb.TipService/CreateTip", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tipServiceClient) UpdateTip(ctx context.Context, in *Tip, opts ...grpc.CallOption) (*Tip, error) {
	out := new(Tip)
	err := c.cc.Invoke(ctx, "/pb.TipService/UpdateTip", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TipServiceServer is the server API for TipService service.
// All implementations must embed UnimplementedTipServiceServer
// for forward compatibility
type TipServiceServer interface {
	FindTips(*FindTipsRequest, TipService_FindTipsServer) error
	FindOneTip(context.Context, *FindOneTipRequest) (*Tip, error)
	CreateTip(context.Context, *Tip) (*Tip, error)
	UpdateTip(context.Context, *Tip) (*Tip, error)
	mustEmbedUnimplementedTipServiceServer()
}

// UnimplementedTipServiceServer must be embedded to have forward compatible implementations.
type UnimplementedTipServiceServer struct {
}

func (UnimplementedTipServiceServer) FindTips(*FindTipsRequest, TipService_FindTipsServer) error {
	return status.Errorf(codes.Unimplemented, "method FindTips not implemented")
}
func (UnimplementedTipServiceServer) FindOneTip(context.Context, *FindOneTipRequest) (*Tip, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindOneTip not implemented")
}
func (UnimplementedTipServiceServer) CreateTip(context.Context, *Tip) (*Tip, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTip not implemented")
}
func (UnimplementedTipServiceServer) UpdateTip(context.Context, *Tip) (*Tip, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTip not implemented")
}
func (UnimplementedTipServiceServer) mustEmbedUnimplementedTipServiceServer() {}

// UnsafeTipServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TipServiceServer will
// result in compilation errors.
type UnsafeTipServiceServer interface {
	mustEmbedUnimplementedTipServiceServer()
}

func RegisterTipServiceServer(s grpc.ServiceRegistrar, srv TipServiceServer) {
	s.RegisterService(&TipService_ServiceDesc, srv)
}

func _TipService_FindTips_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(FindTipsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TipServiceServer).FindTips(m, &tipServiceFindTipsServer{stream})
}

type TipService_FindTipsServer interface {
	Send(*Tip) error
	grpc.ServerStream
}

type tipServiceFindTipsServer struct {
	grpc.ServerStream
}

func (x *tipServiceFindTipsServer) Send(m *Tip) error {
	return x.ServerStream.SendMsg(m)
}

func _TipService_FindOneTip_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindOneTipRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TipServiceServer).FindOneTip(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.TipService/FindOneTip",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TipServiceServer).FindOneTip(ctx, req.(*FindOneTipRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TipService_CreateTip_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Tip)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TipServiceServer).CreateTip(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.TipService/CreateTip",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TipServiceServer).CreateTip(ctx, req.(*Tip))
	}
	return interceptor(ctx, in, info, handler)
}

func _TipService_UpdateTip_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Tip)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TipServiceServer).UpdateTip(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.TipService/UpdateTip",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TipServiceServer).UpdateTip(ctx, req.(*Tip))
	}
	return interceptor(ctx, in, info, handler)
}

// TipService_ServiceDesc is the grpc.ServiceDesc for TipService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TipService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.TipService",
	HandlerType: (*TipServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FindOneTip",
			Handler:    _TipService_FindOneTip_Handler,
		},
		{
			MethodName: "CreateTip",
			Handler:    _TipService_CreateTip_Handler,
		},
		{
			MethodName: "UpdateTip",
			Handler:    _TipService_UpdateTip_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "FindTips",
			Handler:       _TipService_FindTips_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "pb/tip.proto",
}
